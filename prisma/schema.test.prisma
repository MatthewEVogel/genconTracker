generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/@prisma/test-client"
}

datasource db {
  provider = "sqlite"
  url      = "file:./test.db"
}

model CalculationRun {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  totalUsers  Int
  totalEvents Int
  errors      String
}

model RegistrationTimer {
  id               String   @id @default(uuid())
  registrationDate DateTime
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  createdBy        String

  @@map("registration_timer")
}

model DesiredEvents {
  id           String     @id @default(uuid())
  userId       String
  eventsListId String
  eventsList   EventsList @relation(fields: [eventsListId], references: [id], onDelete: Cascade)
  user         UserList   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, eventsListId])
}

model EventsList {
  id                 String          @id
  title              String
  shortDescription   String?
  eventType          String?
  gameSystem         String?
  startDateTime      String?
  endDateTime        String?
  ageRequired        String?
  experienceRequired String?
  materialsRequired  String?
  cost               String?
  location           String?
  ticketsAvailable   Int?
  priority           Int             @default(1)
  isCanceled         Boolean         @default(false)
  desiredEvents      DesiredEvents[]
  trackedBy          UserList[]      @relation("TrackedEvents")
}

model PurchasedEvents {
  id             String           @id @default(uuid())
  eventId        String
  recipient      String
  purchaser      String
  refundedEvents RefundedEvents[]
}

model RefundedEvents {
  id       String          @id @default(uuid())
  userName String
  ticketId String
  ticket   PurchasedEvents @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@unique([userName, ticketId])
}

model UserList {
  id                 String                   @id @default(uuid())
  firstName          String
  lastName           String
  email              String                   @unique
  genConName         String
  isAdmin            Boolean                  @default(false)
  approved           Boolean                  @default(false) // Admin approval for manual accounts
  googleId           String?                  @unique
  provider           String                   @default("manual")
  image              String?
  emailNotifications Boolean                  @default(false)
  pushNotifications  Boolean                  @default(false)
  createdAt          DateTime                 @default(now())
  desiredEvents      DesiredEvents[]
  trackedEvents      EventsList[]             @relation("TrackedEvents")
  personalEvents     PersonalEvent[]
  eventAttendances   PersonalEventAttendee[]
}

model PersonalEvent {
  id        String                   @id @default(uuid())
  title     String
  startTime DateTime
  endTime   DateTime
  location  String?
  createdBy String
  createdAt DateTime                 @default(now())
  updatedAt DateTime                 @updatedAt
  creator   UserList                 @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  attendees PersonalEventAttendee[]

  @@index([createdBy])
  @@index([startTime])
}

model PersonalEventAttendee {
  id              String        @id @default(uuid())
  personalEventId String
  userId          String
  personalEvent   PersonalEvent @relation(fields: [personalEventId], references: [id], onDelete: Cascade)
  user            UserList      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([personalEventId, userId])
}

model pending_users {
  id              String    @id
  firstName       String
  lastName        String
  email           String    @unique
  genConName      String
  requestedAt     DateTime  @default(now())
  status          String    @default("pending")
  reviewedAt      DateTime?
  reviewedBy      String?
  rejectionReason String?
}
