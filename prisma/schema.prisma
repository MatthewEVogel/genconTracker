// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  email     String   @unique
  isAdmin   Boolean  @default(false)
  
  // OAuth fields
  googleId  String?  @unique
  provider  String   @default("manual") // "manual" or "google"
  image     String?  // Profile picture URL
  
  // Notification settings
  phoneNumber String?
  emailNotifications Boolean @default(false)
  textNotifications Boolean @default(false)
  
  createdAt DateTime @default(now())
  userEvents UserEvent[]
  desiredEvents DesiredEvents[]
  ticketAssignments TicketAssignment[]
  eventTicketAssignments EventTicketAssignment[]
}

model Event {
  id                String   @id // Game ID from TSV
  title             String
  shortDescription  String?
  eventType         String?
  gameSystem        String?
  startDateTime     String?
  duration          String?
  endDateTime       String?
  ageRequired       String?
  experienceRequired String?
  materialsRequired String?
  cost              String?
  location          String?
  ticketsAvailable  Int?
  priority          Int      @default(1) // 1=Normal, 2=Important, 3=Critical
  isCanceled        Boolean  @default(false)
  canceledAt        DateTime?
  lastUpdated       DateTime @default(now()) @updatedAt
  createdAt         DateTime @default(now())
  userEvents        UserEvent[]
  ticketAssignments TicketAssignment[]
}

model UserEvent {
  id        String   @id @default(uuid())
  userId    String
  eventId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  
  @@unique([userId, eventId])
}

model TicketAssignment {
  id              String   @id @default(uuid())
  userId          String
  eventId         String
  calculationId   String
  buyingFor       String   // JSON string of user names array
  priority        Int
  cost            String
  createdAt       DateTime @default(now())
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  event           Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  calculation     CalculationRun @relation(fields: [calculationId], references: [id], onDelete: Cascade)
  
  @@unique([userId, eventId, calculationId])
}

model CalculationRun {
  id              String   @id @default(uuid())
  createdAt       DateTime @default(now())
  totalUsers      Int
  totalEvents     Int
  errors          String   // JSON string of error messages array
  
  assignments     TicketAssignment[]
  eventAssignments EventTicketAssignment[]
}

model RegistrationTimer {
  id              String   @id @default(uuid())
  registrationDate DateTime
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdBy       String   // User ID of admin who set it
  
  @@map("registration_timer")
}

model DesiredEvents {
  id            String @id @default(uuid())
  userId        String
  eventsListId  String
  
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventsList    EventsList @relation(fields: [eventsListId], references: [id], onDelete: Cascade)
  
  @@unique([userId, eventsListId])
}

model EventsList {
  id                String   @id // Game ID from TSV
  title             String
  shortDescription  String?
  eventType         String?
  gameSystem        String?
  startDateTime     String?
  endDateTime       String?
  ageRequired       String?
  experienceRequired String?
  materialsRequired String?
  cost              String?
  location          String?
  ticketsAvailable  Int?
  priority          Int      @default(1) // 1=Normal, 2=Important, 3=Critical
  isCanceled        Boolean  @default(false)
  
  desiredEvents     DesiredEvents[]
  eventTicketAssignments EventTicketAssignment[]
}


model EventTicketAssignment {
  id              String   @id @default(uuid())
  userId          String
  eventsListId    String
  calculationId   String
  buyingFor       String   // JSON string of user names array
  priority        Int
  cost            String
  createdAt       DateTime @default(now())
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventsList      EventsList @relation(fields: [eventsListId], references: [id], onDelete: Cascade)
  calculation     CalculationRun @relation(fields: [calculationId], references: [id], onDelete: Cascade)
  
  @@unique([userId, eventsListId, calculationId])
}

model PurchasedTicket {
  id          String   @id @default(uuid())
  eventId     String   // RPG25ND272941 (first 13 chars)
  eventName   String   // Dread: Victim's Choice
  recipient   String   // Liv Benjamin (from ticket)
  purchaser   String   // Matthew Vogel (logged-in user)
  purchaseDate DateTime @default(now())
  needsRefund Boolean  @default(false)
  isRefunded  Boolean  @default(false)
  createdAt   DateTime @default(now())
  
  @@index([eventId])
}

model PurchasedEvents {
  id          String   @id @default(uuid())
  eventId     String   // Event ID - references EventsList
  recipient   String   // Recipient name (from ticket)
  purchaser   String   // Purchaser name (logged-in user)
  
  @@index([eventId])
}
