generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id                 String           @id(map: "User_pkey") @default(uuid())
  firstName          String
  lastName           String
  email              String           @unique(map: "User_email_key")
  isAdmin            Boolean          @default(false)
  googleId           String?          @unique(map: "User_googleId_key")
  provider           String           @default("manual")
  image              String?
  createdAt          DateTime         @default(now())
  emailNotifications Boolean          @default(false)
  phoneNumber        String?
  textNotifications  Boolean          @default(false)
  updatedAt          DateTime         @default(now()) @updatedAt
  desiredEvents      DesiredEvent[]
  purchasedEvents    PurchasedEvent[]
  refundedEvents     RefundedEvent[]

  @@map("users")
}

model Event {
  id                 String           @id(map: "Event_pkey")
  title              String
  shortDescription   String?
  eventType          String?
  gameSystem         String?
  duration           String?
  ageRequired        String?
  experienceRequired String?
  materialsRequired  String?
  location           String?
  ticketsAvailable   Int?
  priority           Int              @default(1)
  isCanceled         Boolean          @default(false)
  canceledAt         DateTime?
  lastUpdated        DateTime         @default(now()) @updatedAt
  createdAt          DateTime         @default(now())
  startDateTime      DateTime?
  endDateTime        DateTime?
  cost               Decimal?         @db.Decimal(10, 2)
  desiredEvents      DesiredEvent[]
  purchasedEvents    PurchasedEvent[]
  refundedEvents     RefundedEvent[]

  @@map("events")
}

model DesiredEvent {
  id        String   @id(map: "UserEvent_pkey") @default(uuid())
  userId    String
  eventId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  priority  Int      @default(1)
  notes     String?
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId], map: "UserEvent_userId_eventId_key")
  @@map("desired_events")
}

model PurchasedEvent {
  id           String   @id @default(uuid())
  userId       String
  eventId      String
  recipient    String
  purchaseDate DateTime @default(now())
  cost         Decimal? @db.Decimal(10, 2)
  confirmation String?
  createdAt    DateTime @default(now())
  event        Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([eventId])
  @@index([userId])
  @@map("purchased_events")
}

model RefundedEvent {
  id           String   @id @default(uuid())
  userId       String
  eventId      String
  recipient    String
  originalCost Decimal? @db.Decimal(10, 2)
  refundAmount Decimal? @db.Decimal(10, 2)
  purchaseDate DateTime
  refundDate   DateTime @default(now())
  refundReason String?
  confirmation String?
  createdAt    DateTime @default(now())
  event        Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([eventId])
  @@index([userId])
  @@map("refunded_events")
}

model RegistrationTimer {
  id               String   @id @default(uuid())
  registrationDate DateTime
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  createdBy        String

  @@map("registration_timer")
}

model TicketAssignment {
  id            String         @id(map: "TicketAssignment_pkey") @default(uuid())
  userId        String
  eventId       String
  calculationId String
  buyingFor     String
  priority      Int
  cost          String
  createdAt     DateTime       @default(now())
  calculation   CalculationRun @relation(fields: [calculationId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId, calculationId], map: "TicketAssignment_userId_eventId_calculationId_key")
  @@map("ticket_assignments")
}

model CalculationRun {
  id          String             @id(map: "CalculationRun_pkey") @default(uuid())
  createdAt   DateTime           @default(now())
  totalUsers  Int
  totalEvents Int
  errors      String
  assignments TicketAssignment[]

  @@map("calculation_runs")
}

model PurchasedTicket {
  id           String   @id(map: "PurchasedTicket_pkey") @default(uuid())
  eventId      String
  eventName    String
  recipient    String
  purchaser    String
  purchaseDate DateTime @default(now())
  needsRefund  Boolean  @default(false)
  isRefunded   Boolean  @default(false)
  createdAt    DateTime @default(now())

  @@index([eventId], map: "PurchasedTicket_eventId_idx")
  @@map("purchased_tickets")
}
