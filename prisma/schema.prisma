// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  email     String   @unique
  isAdmin   Boolean  @default(false)
  
  // OAuth fields
  googleId  String?  @unique
  provider  String   @default("manual")
  image     String?
  
  // Notification settings
  phoneNumber String?
  emailNotifications Boolean @default(false)
  textNotifications Boolean @default(false)
  
  createdAt DateTime @default(now())
  
  // Relations
  desiredEvents DesiredEvent[]
  purchasedEvents PurchasedEvent[]
  refundedEvents RefundedEvent[]
}

model Event {
  id                String   @id
  title             String
  shortDescription  String?
  eventType         String?
  gameSystem        String?
  startDateTime     String?
  duration          String?
  endDateTime       String?
  ageRequired       String?
  experienceRequired String?
  materialsRequired String?
  cost              String?
  location          String?
  ticketsAvailable  Int?
  isCanceled        Boolean  @default(false)
  canceledAt        DateTime?
  lastUpdated       DateTime @default(now()) @updatedAt
  createdAt         DateTime @default(now())
  
  // Relations
  desiredEvents DesiredEvent[]
  purchasedEvents PurchasedEvent[]
  refundedEvents RefundedEvent[]
}

model DesiredEvent {
  id        String   @id @default(uuid())
  userId    String
  eventId   String
  priority  Int      @default(1)
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  
  @@unique([userId, eventId])
}

model PurchasedEvent {
  id           String   @id @default(uuid())
  userId       String
  eventId      String
  recipient    String
  purchaseDate DateTime @default(now())
  createdAt    DateTime @default(now())
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  event        Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  
  @@unique([userId, eventId])
}

model RefundedEvent {
  id          String   @id @default(uuid())
  userId      String
  eventId     String
  refundDate  DateTime @default(now())
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  
  @@unique([userId, eventId])
}
