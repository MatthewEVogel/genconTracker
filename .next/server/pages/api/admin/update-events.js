"use strict";(()=>{var e={};e.id=86,e.ids=[86],e.modules={973:(e,t,n)=>{n.r(t),n.d(t,{config:()=>w,default:()=>f,routeModule:()=>h});var r={};n.r(r),n.d(r,{default:()=>p});var i=n(3480),a=n(8667),s=n(6435);let l=require("next-auth/next");var o=n(2371),d=n(1853);let u=require("adm-zip");var c=n.n(u);let m=require("xlsx");async function g(){let e={success:!1,message:"",stats:{downloaded:!1,totalEvents:0,newEvents:0,updatedEvents:0,canceledEvents:0,deletedEvents:0,errors:[]}};try{console.log("Starting GenCon events update..."),console.log("Downloading events.zip from GenCon...");let t=await fetch("https://www.gencon.com/downloads/events.zip");if(!t.ok)throw Error(`Failed to download events.zip: ${t.status} ${t.statusText}`);let n=Buffer.from(await t.arrayBuffer());e.stats.downloaded=!0,console.log("Successfully downloaded events.zip"),console.log("Extracting and parsing XLSX file...");let r=new(c())(n).getEntries().find(e=>e.entryName.toLowerCase().endsWith(".xlsx")&&!e.isDirectory);if(!r)throw Error("No XLSX file found in the downloaded ZIP archive");console.log(`Found XLSX file: ${r.entryName}`);let i=r.getData(),a=function(e){try{let t=m.read(e,{type:"buffer"}),n=t.SheetNames[0],r=t.Sheets[n],i=m.utils.sheet_to_json(r,{header:1});if(i.length<2)throw Error("XLSX file appears to be empty or has no data rows");let a=i.slice(1),s=[];for(let e of a)if(e&&!(e.length<31)&&e[0]&&e[2])try{let t={id:String(e[0]).trim(),title:String(e[2]).trim(),shortDescription:e[3]?String(e[3]).trim():void 0,eventType:e[5]?String(e[5]).trim():void 0,gameSystem:e[6]?String(e[6]).trim():void 0,startDateTime:e[14]?String(e[14]).trim():void 0,duration:e[15]?String(e[15]).trim():void 0,endDateTime:e[16]?String(e[16]).trim():void 0,ageRequired:e[10]?String(e[10]).trim():void 0,experienceRequired:e[11]?String(e[11]).trim():void 0,materialsRequired:e[12]?String(e[12]).trim():void 0,cost:e[25]?String(e[25]).trim():void 0,location:e[26]?String(e[26]).trim():void 0,ticketsAvailable:e[30]&&parseInt(String(e[30]).trim())||void 0};s.push(t)}catch(t){console.warn(`Error parsing event row with ID ${e[0]}:`,t);continue}return console.log(`Successfully parsed ${s.length} events from XLSX`),s}catch(e){throw console.error("Error parsing XLSX file:",e),Error(`Failed to parse XLSX file: ${e instanceof Error?e.message:"Unknown error"}`)}}(i);e.stats.totalEvents=a.length,console.log(`Parsed ${a.length} events from XLSX`),console.log("Performing differential database update..."),await v(a,e.stats),e.success=!0,e.message=`Successfully updated events. New: ${e.stats.newEvents}, Updated: ${e.stats.updatedEvents}, Canceled: ${e.stats.canceledEvents}, Deleted: ${e.stats.deletedEvents}`,console.log("Event update completed successfully"),console.log(e.message)}catch(n){let t=n instanceof Error?n.message:"Unknown error occurred";e.success=!1,e.message=`Event update failed: ${t}`,e.stats.errors.push(t),console.error("Event update failed:",n)}return e}async function v(e,t){let n=await d.z.event.findMany({select:{id:!0,title:!0,shortDescription:!0,eventType:!0,gameSystem:!0,startDateTime:!0,duration:!0,endDateTime:!0,ageRequired:!0,experienceRequired:!0,materialsRequired:!0,cost:!0,location:!0,ticketsAvailable:!0,isCanceled:!0,_count:{select:{userEvents:!0}}}}),r=new Map(n.map(e=>[e.id,e])),i=new Set(e.map(e=>e.id));for(let n of e)try{let e=r.get(n.id);e?(e.title!==n.title||e.shortDescription!==(n.shortDescription||null)||e.eventType!==(n.eventType||null)||e.gameSystem!==(n.gameSystem||null)||e.startDateTime!==(n.startDateTime||null)||e.duration!==(n.duration||null)||e.endDateTime!==(n.endDateTime||null)||e.ageRequired!==(n.ageRequired||null)||e.experienceRequired!==(n.experienceRequired||null)||e.materialsRequired!==(n.materialsRequired||null)||e.cost!==(n.cost||null)||e.location!==(n.location||null)||e.ticketsAvailable!==(n.ticketsAvailable||null)||e.isCanceled)&&(await d.z.event.update({where:{id:n.id},data:{title:n.title,shortDescription:n.shortDescription||null,eventType:n.eventType||null,gameSystem:n.gameSystem||null,startDateTime:n.startDateTime||null,duration:n.duration||null,endDateTime:n.endDateTime||null,ageRequired:n.ageRequired||null,experienceRequired:n.experienceRequired||null,materialsRequired:n.materialsRequired||null,cost:n.cost||null,location:n.location||null,ticketsAvailable:n.ticketsAvailable||null,isCanceled:!1,canceledAt:null,lastUpdated:new Date}}),t.updatedEvents++,console.log(`Updated event: ${n.id} - ${n.title}`)):(await d.z.event.create({data:{id:n.id,title:n.title,shortDescription:n.shortDescription||null,eventType:n.eventType||null,gameSystem:n.gameSystem||null,startDateTime:n.startDateTime||null,duration:n.duration||null,endDateTime:n.endDateTime||null,ageRequired:n.ageRequired||null,experienceRequired:n.experienceRequired||null,materialsRequired:n.materialsRequired||null,cost:n.cost||null,location:n.location||null,ticketsAvailable:n.ticketsAvailable||null,priority:1,isCanceled:!1}}),t.newEvents++,console.log(`Created new event: ${n.id} - ${n.title}`))}catch(r){let e=`Error processing event ${n.id}: ${r instanceof Error?r.message:"Unknown error"}`;t.errors.push(e),console.error(e)}for(let e of n)if(!i.has(e.id)&&!e.isCanceled)try{e._count.userEvents>0?(await d.z.event.update({where:{id:e.id},data:{isCanceled:!0,canceledAt:new Date,lastUpdated:new Date}}),t.canceledEvents++,console.log(`Marked event as canceled: ${e.id} - ${e.title}`)):(await d.z.event.delete({where:{id:e.id}}),t.deletedEvents++,console.log(`Deleted unused event: ${e.id} - ${e.title}`))}catch(r){let n=`Error handling canceled event ${e.id}: ${r instanceof Error?r.message:"Unknown error"}`;t.errors.push(n),console.error(n)}try{for(let e of(await d.z.event.findMany({where:{isCanceled:!0,userEvents:{none:{}}}})))await d.z.event.delete({where:{id:e.id}}),t.deletedEvents++,console.log(`Cleaned up canceled event with no users: ${e.id} - ${e.title}`)}catch(n){let e=`Error cleaning up canceled events: ${n instanceof Error?n.message:"Unknown error"}`;t.errors.push(e),console.error(e)}}async function p(e,t){if("POST"!==e.method)return t.status(405).json({error:"Method not allowed"});try{let n=await (0,l.getServerSession)(e,t,o.N);if(!n?.user?.email)return t.status(401).json({error:"Authentication required"});let r=await d.z.user.findUnique({where:{email:n.user.email},select:{id:!0,isAdmin:!0,firstName:!0,lastName:!0}});if(!r)return t.status(401).json({error:"User not found"});if(!r.isAdmin)return t.status(403).json({error:"Admin access required"});console.log(`Admin ${r.firstName} ${r.lastName} (${r.id}) initiated event update`);let i=await g();return i.success?console.log(`Event update completed successfully by admin ${r.id}:`,i.stats):console.error(`Event update failed for admin ${r.id}:`,i.message),t.status(i.success?200:500).json(i)}catch(n){console.error("Error in update-events API:",n);let e=n instanceof Error?n.message:"Unknown error occurred";return t.status(500).json({success:!1,message:`Server error: ${e}`,stats:{downloaded:!1,totalEvents:0,newEvents:0,updatedEvents:0,canceledEvents:0,deletedEvents:0,errors:[e]}})}}let f=(0,s.M)(r,"default"),w=(0,s.M)(r,"config"),h=new i.PagesAPIRouteModule({definition:{kind:a.A.PAGES_API,page:"/api/admin/update-events",pathname:"/api/admin/update-events",bundlePath:"",filename:""},userland:r})},1853:(e,t,n)=>{n.d(t,{z:()=>i});var r=n(6330);let i=globalThis.prisma??new r.PrismaClient},2371:(e,t,n)=>{n.d(t,{N:()=>s});let r=require("next-auth/providers/google");var i=n.n(r),a=n(1853);let s={providers:[i()({clientId:process.env.GOOGLE_CLIENT_ID,clientSecret:process.env.GOOGLE_CLIENT_SECRET})],callbacks:{async signIn({user:e,account:t,profile:n}){if(t?.provider==="google")try{let t=await a.z.user.findUnique({where:{email:e.email}});if(t)t.googleId||await a.z.user.update({where:{id:t.id},data:{googleId:e.id,provider:"google",image:e.image,firstName:n?.given_name||t.firstName,lastName:n?.family_name||t.lastName}});else{let t="matthewvogel1729@gmail.com"===e.email;await a.z.user.create({data:{id:e.id,email:e.email,firstName:n?.given_name||e.name?.split(" ")[0]||"Unknown",lastName:n?.family_name||e.name?.split(" ").slice(1).join(" ")||"User",googleId:e.id,provider:"google",image:e.image,isAdmin:t}})}}catch(e){return console.error("Error during Google sign in:",e),!1}return!0},async session({session:e,user:t}){let n=await a.z.user.findUnique({where:{email:e.user?.email}});return n&&(e.user={...e.user,id:n.id,firstName:n.firstName,lastName:n.lastName,isAdmin:n.isAdmin,provider:n.provider,image:n.image}),e},jwt:async({token:e,user:t})=>(t&&(e.id=t.id),e)},pages:{signIn:"/"},session:{strategy:"jwt"}}},3480:(e,t,n)=>{e.exports=n(5600)},5600:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},6330:e=>{e.exports=require("@prisma/client")},6435:(e,t)=>{Object.defineProperty(t,"M",{enumerable:!0,get:function(){return function e(t,n){return n in t?t[n]:"then"in t&&"function"==typeof t.then?t.then(t=>e(t,n)):"function"==typeof t&&"default"===n?t:void 0}}})},8667:(e,t)=>{Object.defineProperty(t,"A",{enumerable:!0,get:function(){return n}});var n=function(e){return e.PAGES="PAGES",e.PAGES_API="PAGES_API",e.APP_PAGE="APP_PAGE",e.APP_ROUTE="APP_ROUTE",e.IMAGE="IMAGE",e}({})}};var t=require("../../../webpack-api-runtime.js");t.C(e);var n=t(t.s=973);module.exports=n})();