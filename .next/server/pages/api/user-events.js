"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/user-events";
exports.ids = ["pages/api/user-events"];
exports.modules = {

/***/ "(api-node)/./lib/prisma.ts":
/*!***********************!*\
  !*** ./lib/prisma.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   prisma: () => (/* binding */ prisma)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n// Import the PrismaClient from the generated Prisma package\n\n// Define a custom type for globalThis to include our Prisma instance\nconst globalForPrisma = globalThis;\n// Create (or reuse) a single PrismaClient instance\nconst prisma = globalForPrisma.prisma ?? new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient(); // use existing or create new\n// In development, store the PrismaClient on globalThis to reuse between reloads\nif (true) {\n    globalForPrisma.prisma = prisma;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL2xpYi9wcmlzbWEudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsNERBQTREO0FBQ2Q7QUFFOUMscUVBQXFFO0FBQ3JFLE1BQU1DLGtCQUFrQkM7QUFJeEIsbURBQW1EO0FBQzVDLE1BQU1DLFNBQ1hGLGdCQUFnQkUsTUFBTSxJQUFJLElBQUlILHdEQUFZQSxHQUFHLENBQUMsNkJBQTZCO0FBRTdFLGdGQUFnRjtBQUNoRixJQUFJSSxJQUFxQyxFQUFFO0lBQ3pDSCxnQkFBZ0JFLE1BQU0sR0FBR0E7QUFDM0IiLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYXR0aGV3dm9nZWwvdnNDb2RlIHByb2plY3RzL2dlbmNvblRyYWNrZXIvbGliL3ByaXNtYS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnQgdGhlIFByaXNtYUNsaWVudCBmcm9tIHRoZSBnZW5lcmF0ZWQgUHJpc21hIHBhY2thZ2VcbmltcG9ydCB7IFByaXNtYUNsaWVudCB9IGZyb20gXCJAcHJpc21hL2NsaWVudFwiO1xuXG4vLyBEZWZpbmUgYSBjdXN0b20gdHlwZSBmb3IgZ2xvYmFsVGhpcyB0byBpbmNsdWRlIG91ciBQcmlzbWEgaW5zdGFuY2VcbmNvbnN0IGdsb2JhbEZvclByaXNtYSA9IGdsb2JhbFRoaXMgYXMgdW5rbm93biBhcyB7XG4gIHByaXNtYTogUHJpc21hQ2xpZW50IHwgdW5kZWZpbmVkOyAvLyBvcHRpb25hbCBQcmlzbWEgaW5zdGFuY2Ugb24gZ2xvYmFsIG9iamVjdFxufTtcblxuLy8gQ3JlYXRlIChvciByZXVzZSkgYSBzaW5nbGUgUHJpc21hQ2xpZW50IGluc3RhbmNlXG5leHBvcnQgY29uc3QgcHJpc21hID1cbiAgZ2xvYmFsRm9yUHJpc21hLnByaXNtYSA/PyBuZXcgUHJpc21hQ2xpZW50KCk7IC8vIHVzZSBleGlzdGluZyBvciBjcmVhdGUgbmV3XG5cbi8vIEluIGRldmVsb3BtZW50LCBzdG9yZSB0aGUgUHJpc21hQ2xpZW50IG9uIGdsb2JhbFRoaXMgdG8gcmV1c2UgYmV0d2VlbiByZWxvYWRzXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIGdsb2JhbEZvclByaXNtYS5wcmlzbWEgPSBwcmlzbWE7XG59XG4iXSwibmFtZXMiOlsiUHJpc21hQ2xpZW50IiwiZ2xvYmFsRm9yUHJpc21hIiwiZ2xvYmFsVGhpcyIsInByaXNtYSIsInByb2Nlc3MiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api-node)/./lib/prisma.ts\n");

/***/ }),

/***/ "(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fuser-events&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fuser-events.ts&middlewareConfigBase64=e30%3D!":
/*!****************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fuser-events&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fuser-events.ts&middlewareConfigBase64=e30%3D! ***!
  \****************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/pages-api/module.compiled */ \"(api-node)/./node_modules/next/dist/server/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(api-node)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api-node)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_user_events_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages/api/user-events.ts */ \"(api-node)/./pages/api/user-events.ts\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_user_events_ts__WEBPACK_IMPORTED_MODULE_3__, 'default'));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_user_events_ts__WEBPACK_IMPORTED_MODULE_3__, 'config');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/user-events\",\n        pathname: \"/api/user-events\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    userland: _pages_api_user_events_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtcm91dGUtbG9hZGVyL2luZGV4LmpzP2tpbmQ9UEFHRVNfQVBJJnBhZ2U9JTJGYXBpJTJGdXNlci1ldmVudHMmcHJlZmVycmVkUmVnaW9uPSZhYnNvbHV0ZVBhZ2VQYXRoPS4lMkZwYWdlcyUyRmFwaSUyRnVzZXItZXZlbnRzLnRzJm1pZGRsZXdhcmVDb25maWdCYXNlNjQ9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUErRjtBQUN2QztBQUNFO0FBQzFEO0FBQ3VEO0FBQ3ZEO0FBQ0EsaUVBQWUsd0VBQUssQ0FBQyxzREFBUSxZQUFZLEVBQUM7QUFDMUM7QUFDTyxlQUFlLHdFQUFLLENBQUMsc0RBQVE7QUFDcEM7QUFDTyx3QkFBd0IseUdBQW1CO0FBQ2xEO0FBQ0EsY0FBYyxrRUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLFlBQVk7QUFDWixDQUFDOztBQUVEIiwic291cmNlcyI6WyIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGFnZXNBUElSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL3JvdXRlLW1vZHVsZXMvcGFnZXMtYXBpL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgaG9pc3QgfSBmcm9tIFwibmV4dC9kaXN0L2J1aWxkL3RlbXBsYXRlcy9oZWxwZXJzXCI7XG4vLyBJbXBvcnQgdGhlIHVzZXJsYW5kIGNvZGUuXG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiLi9wYWdlcy9hcGkvdXNlci1ldmVudHMudHNcIjtcbi8vIFJlLWV4cG9ydCB0aGUgaGFuZGxlciAoc2hvdWxkIGJlIHRoZSBkZWZhdWx0IGV4cG9ydCkuXG5leHBvcnQgZGVmYXVsdCBob2lzdCh1c2VybGFuZCwgJ2RlZmF1bHQnKTtcbi8vIFJlLWV4cG9ydCBjb25maWcuXG5leHBvcnQgY29uc3QgY29uZmlnID0gaG9pc3QodXNlcmxhbmQsICdjb25maWcnKTtcbi8vIENyZWF0ZSBhbmQgZXhwb3J0IHRoZSByb3V0ZSBtb2R1bGUgdGhhdCB3aWxsIGJlIGNvbnN1bWVkLlxuZXhwb3J0IGNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IFBhZ2VzQVBJUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLlBBR0VTX0FQSSxcbiAgICAgICAgcGFnZTogXCIvYXBpL3VzZXItZXZlbnRzXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvdXNlci1ldmVudHNcIixcbiAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBhcmVuJ3QgdXNlZCBpbiBwcm9kdWN0aW9uLlxuICAgICAgICBidW5kbGVQYXRoOiAnJyxcbiAgICAgICAgZmlsZW5hbWU6ICcnXG4gICAgfSxcbiAgICB1c2VybGFuZFxufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZ2VzLWFwaS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fuser-events&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fuser-events.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api-node)/./pages/api/user-events.ts":
/*!**********************************!*\
  !*** ./pages/api/user-events.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/prisma */ \"(api-node)/./lib/prisma.ts\");\n/* harmony import */ var _utils_ticketAssignmentService__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/utils/ticketAssignmentService */ \"(api-node)/./utils/ticketAssignmentService.ts\");\n\n\nasync function handler(req, res) {\n    if (req.method === 'GET') {\n        try {\n            const { userId, canceled } = req.query;\n            if (!userId || typeof userId !== 'string') {\n                return res.status(400).json({\n                    error: 'User ID is required'\n                });\n            }\n            // Build where clause based on query parameters\n            const whereClause = {\n                userId\n            };\n            // If canceled=true, only return canceled events\n            // If canceled=false, only return non-canceled events\n            // If canceled is not specified, return all events\n            if (canceled === 'true') {\n                whereClause.event = {\n                    isCanceled: true\n                };\n            } else if (canceled === 'false') {\n                whereClause.event = {\n                    isCanceled: false\n                };\n            }\n            const userEvents = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.userEvent.findMany({\n                where: whereClause,\n                include: {\n                    event: true\n                }\n            });\n            // For canceled events query, return in the format expected by CanceledEventAlert\n            if (canceled === 'true') {\n                const events = userEvents.map((ue)=>({\n                        id: ue.event.id,\n                        title: ue.event.title,\n                        startDateTime: ue.event.startDateTime,\n                        canceledAt: ue.event.canceledAt,\n                        isCanceled: ue.event.isCanceled\n                    }));\n                return res.status(200).json({\n                    events\n                });\n            }\n            return res.status(200).json({\n                userEvents\n            });\n        } catch (error) {\n            console.error('Error fetching user events:', error);\n            return res.status(500).json({\n                error: 'Failed to fetch user events'\n            });\n        }\n    }\n    if (req.method === 'POST') {\n        try {\n            const { userId, eventId } = req.body;\n            if (!userId || !eventId) {\n                return res.status(400).json({\n                    error: 'User ID and Event ID are required'\n                });\n            }\n            // Check if user event already exists\n            const existingUserEvent = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.userEvent.findUnique({\n                where: {\n                    userId_eventId: {\n                        userId,\n                        eventId\n                    }\n                }\n            });\n            if (existingUserEvent) {\n                return res.status(400).json({\n                    error: 'User is already registered for this event'\n                });\n            }\n            // Get event details for conflict checking\n            const event = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.event.findUnique({\n                where: {\n                    id: eventId\n                }\n            });\n            if (!event) {\n                return res.status(404).json({\n                    error: 'Event not found'\n                });\n            }\n            // Check for time conflicts\n            const userEvents = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.userEvent.findMany({\n                where: {\n                    userId\n                },\n                include: {\n                    event: true\n                }\n            });\n            const conflicts = [];\n            if (event.startDateTime && event.endDateTime) {\n                const newEventStart = new Date(event.startDateTime);\n                const newEventEnd = new Date(event.endDateTime);\n                for (const userEvent of userEvents){\n                    if (userEvent.event.startDateTime && userEvent.event.endDateTime) {\n                        const existingStart = new Date(userEvent.event.startDateTime);\n                        const existingEnd = new Date(userEvent.event.endDateTime);\n                        // Check for overlap\n                        if (newEventStart < existingEnd && newEventEnd > existingStart) {\n                            conflicts.push({\n                                eventId: userEvent.event.id,\n                                title: userEvent.event.title,\n                                startDateTime: userEvent.event.startDateTime,\n                                endDateTime: userEvent.event.endDateTime\n                            });\n                        }\n                    }\n                }\n            }\n            // Check capacity\n            const eventSignups = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.userEvent.count({\n                where: {\n                    eventId\n                }\n            });\n            const capacityWarning = event.ticketsAvailable ? eventSignups >= event.ticketsAvailable : false;\n            // Create the user event\n            const userEvent = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.userEvent.create({\n                data: {\n                    userId,\n                    eventId\n                },\n                include: {\n                    event: true\n                }\n            });\n            // Trigger ticket assignment recalculation in the background\n            (0,_utils_ticketAssignmentService__WEBPACK_IMPORTED_MODULE_1__.recalculateAndSaveTicketAssignments)().catch((error)=>{\n                console.error('Error recalculating ticket assignments after event creation:', error);\n            });\n            return res.status(201).json({\n                userEvent,\n                conflicts,\n                capacityWarning\n            });\n        } catch (error) {\n            console.error('Error creating user event:', error);\n            return res.status(500).json({\n                error: 'Failed to create user event'\n            });\n        }\n    }\n    if (req.method === 'DELETE') {\n        try {\n            const { userId, eventId } = req.body;\n            if (!userId || !eventId) {\n                return res.status(400).json({\n                    error: 'User ID and Event ID are required'\n                });\n            }\n            const userEvent = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.userEvent.findUnique({\n                where: {\n                    userId_eventId: {\n                        userId,\n                        eventId\n                    }\n                }\n            });\n            if (!userEvent) {\n                return res.status(404).json({\n                    error: 'User event not found'\n                });\n            }\n            await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.userEvent.delete({\n                where: {\n                    userId_eventId: {\n                        userId,\n                        eventId\n                    }\n                }\n            });\n            // Trigger ticket assignment recalculation in the background\n            (0,_utils_ticketAssignmentService__WEBPACK_IMPORTED_MODULE_1__.recalculateAndSaveTicketAssignments)().catch((error)=>{\n                console.error('Error recalculating ticket assignments after event deletion:', error);\n            });\n            return res.status(200).json({\n                message: 'User event deleted successfully'\n            });\n        } catch (error) {\n            console.error('Error deleting user event:', error);\n            return res.status(500).json({\n                error: 'Failed to delete user event'\n            });\n        }\n    }\n    return res.status(405).json({\n        error: 'Method not allowed'\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./pages/api/user-events.ts\n");

/***/ }),

/***/ "(api-node)/./utils/ticketAlgorithm.ts":
/*!**********************************!*\
  !*** ./utils/ticketAlgorithm.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateTicketAssignments: () => (/* binding */ calculateTicketAssignments),\n/* harmony export */   getPriorityEmoji: () => (/* binding */ getPriorityEmoji),\n/* harmony export */   getPriorityLabel: () => (/* binding */ getPriorityLabel)\n/* harmony export */ });\nconst EVENT_LIMIT = 50; // Maximum events per user (not tickets)\n// Sort events by priority (highest first), then by number of interested users\nfunction sortEventsByPriority(events) {\n    return events.sort((a, b)=>{\n        // First sort by priority (higher priority first)\n        if (a.priority !== b.priority) {\n            return b.priority - a.priority;\n        }\n        // Then by number of interested users (more users first)\n        return b.interestedUsers.length - a.interestedUsers.length;\n    });\n}\n// Calculate how many more events each user can take\nfunction getAvailableCapacity(userEventCounts) {\n    let totalAvailable = 0;\n    for (const count of userEventCounts.values()){\n        totalAvailable += Math.max(0, EVENT_LIMIT - count);\n    }\n    return totalAvailable;\n}\n// This function is no longer needed with the new iterative algorithm\n// Keeping it for now but it won't be used\nfunction assignBuyersForEvent(event, targetBuyers, userTicketCounts, allUsers) {\n    return [];\n}\nfunction calculateTicketAssignments(userEvents, allUsers) {\n    const errors = [];\n    // Get unique users - use provided allUsers if available, otherwise extract from userEvents\n    let users;\n    if (allUsers && allUsers.length > 0) {\n        users = allUsers;\n    } else {\n        // Deduplicate users from userEvents\n        const userSet = new Map();\n        userEvents.forEach((ue)=>{\n            userSet.set(ue.userId, {\n                userId: ue.userId,\n                userName: ue.userName\n            });\n        });\n        users = Array.from(userSet.values());\n    }\n    const userMap = new Map(users.map((u)=>[\n            u.userId,\n            u.userName\n        ]));\n    const allUserIds = users.map((u)=>u.userId);\n    // If no users, return empty assignments\n    if (users.length === 0) {\n        return {\n            assignments: [],\n            errors: [\n                'No users found'\n            ]\n        };\n    }\n    // Group events by eventId and use event priority if provided\n    const eventMap = new Map();\n    for (const userEvent of userEvents){\n        if (!eventMap.has(userEvent.eventId)) {\n            eventMap.set(userEvent.eventId, {\n                eventId: userEvent.eventId,\n                eventTitle: userEvent.eventTitle,\n                cost: userEvent.cost,\n                priority: userEvent.eventPriority || 1,\n                interestedUsers: []\n            });\n        }\n        const event = eventMap.get(userEvent.eventId);\n        // Update priority if a higher one is provided\n        if (userEvent.eventPriority && userEvent.eventPriority > event.priority) {\n            event.priority = userEvent.eventPriority;\n        }\n        // Check if this user is already in the interested users list to prevent duplicates\n        const existingUserIndex = event.interestedUsers.findIndex((u)=>u.userId === userEvent.userId);\n        if (existingUserIndex < 0) {\n            // Add new user to interested users\n            event.interestedUsers.push({\n                userId: userEvent.userId,\n                userName: userEvent.userName\n            });\n        }\n    }\n    const events = Array.from(eventMap.values());\n    const sortedEvents = sortEventsByPriority(events);\n    // Initialize ticket counts for each user\n    const userTicketCounts = new Map();\n    allUserIds.forEach((userId)=>userTicketCounts.set(userId, 0));\n    // Track which events each user is buying\n    const userAssignments = new Map();\n    allUserIds.forEach((userId)=>userAssignments.set(userId, []));\n    // NEW ITERATIVE ALGORITHM: Even coverage with priority-based processing\n    // Group events by priority tier\n    const eventsByPriority = new Map();\n    for (const event of sortedEvents){\n        const priority = event.priority;\n        if (!eventsByPriority.has(priority)) {\n            eventsByPriority.set(priority, []);\n        }\n        eventsByPriority.get(priority).push(event);\n    }\n    // Process each priority tier in order (3 -> 2 -> 1)\n    const priorityLevels = [\n        3,\n        2,\n        1\n    ];\n    // Track which events have already been processed to avoid double-processing\n    const processedEvents = new Set();\n    for (const priorityLevel of priorityLevels){\n        const eventsInTier = eventsByPriority.get(priorityLevel) || [];\n        if (eventsInTier.length === 0) continue;\n        // Filter out events that were already processed in higher priority tiers\n        const unprocessedEventsInTier = eventsInTier.filter((event)=>!processedEvents.has(event.eventId));\n        if (unprocessedEventsInTier.length === 0) continue;\n        // Track current buyer count for each event in this tier\n        const eventBuyerCounts = new Map();\n        unprocessedEventsInTier.forEach((event)=>eventBuyerCounts.set(event.eventId, 0));\n        // Track which events each user is already assigned to buy (prevent duplicates)\n        const userEventAssignments = new Map();\n        allUserIds.forEach((userId)=>userEventAssignments.set(userId, new Set()));\n        // Iteratively assign buyers until stopping conditions are met\n        while(true){\n            // Check if any users have capacity\n            const usersWithCapacity = allUserIds.filter((userId)=>userTicketCounts.get(userId) < EVENT_LIMIT);\n            // STOPPING CONDITION 2: All users at 50-event limit\n            if (usersWithCapacity.length === 0) break;\n            // STOPPING CONDITION 1: Maximum coverage achieved \n            // (every event assigned to every available user who doesn't already have it)\n            const maxCoverageAchieved = unprocessedEventsInTier.every((event)=>{\n                const usersWhoCanTakeThisEvent = usersWithCapacity.filter((userId)=>!userEventAssignments.get(userId).has(event.eventId));\n                return usersWhoCanTakeThisEvent.length === 0;\n            });\n            if (maxCoverageAchieved) break;\n            // Find event with fewest current buyers\n            let eventWithFewestBuyers = null;\n            let minBuyerCount = Infinity;\n            for (const event of unprocessedEventsInTier){\n                const currentBuyers = eventBuyerCounts.get(event.eventId);\n                if (currentBuyers < minBuyerCount) {\n                    minBuyerCount = currentBuyers;\n                    eventWithFewestBuyers = event;\n                } else if (currentBuyers === minBuyerCount && eventWithFewestBuyers) {\n                    // Tie-breaker: event with most interested users\n                    if (event.interestedUsers.length > eventWithFewestBuyers.interestedUsers.length) {\n                        eventWithFewestBuyers = event;\n                    }\n                }\n            }\n            if (!eventWithFewestBuyers) break;\n            // Find user with fewest current events who can take more AND doesn't already have this event\n            let userWithFewestEvents = null;\n            let minEventCount = Infinity;\n            for (const userId of usersWithCapacity){\n                // Skip users who already have this event assigned\n                if (userEventAssignments.get(userId).has(eventWithFewestBuyers.eventId)) {\n                    continue;\n                }\n                const currentEvents = userTicketCounts.get(userId);\n                if (currentEvents < minEventCount) {\n                    minEventCount = currentEvents;\n                    userWithFewestEvents = userId;\n                }\n            }\n            if (!userWithFewestEvents) break;\n            // Assign this user to buy this event\n            userTicketCounts.set(userWithFewestEvents, userTicketCounts.get(userWithFewestEvents) + 1);\n            eventBuyerCounts.set(eventWithFewestBuyers.eventId, eventBuyerCounts.get(eventWithFewestBuyers.eventId) + 1);\n            // Track that this user is now assigned to this event (prevent duplicates)\n            userEventAssignments.get(userWithFewestEvents).add(eventWithFewestBuyers.eventId);\n            // Add this event to the user's assignment list\n            const buyingFor = eventWithFewestBuyers.interestedUsers.map((u)=>u.userName);\n            userAssignments.get(userWithFewestEvents).push({\n                eventId: eventWithFewestBuyers.eventId,\n                eventTitle: eventWithFewestBuyers.eventTitle,\n                priority: eventWithFewestBuyers.priority,\n                buyingFor,\n                cost: eventWithFewestBuyers.cost\n            });\n        }\n        // Mark all events in this tier as processed\n        unprocessedEventsInTier.forEach((event)=>processedEvents.add(event.eventId));\n    }\n    // Convert to final format\n    const assignments = allUserIds.map((userId)=>({\n            userId,\n            userName: userMap.get(userId),\n            events: userAssignments.get(userId),\n            totalTickets: userTicketCounts.get(userId)\n        }));\n    // Check for users over the event limit (should not happen with proper algorithm)\n    for (const assignment of assignments){\n        if (assignment.totalTickets > EVENT_LIMIT) {\n            errors.push(`${assignment.userName} assigned ${assignment.totalTickets} events (over limit of ${EVENT_LIMIT})`);\n        }\n    }\n    // Check if we have unused capacity that could be utilized\n    const totalEventsAssigned = assignments.reduce((sum, a)=>sum + a.totalTickets, 0);\n    const maxPossibleEvents = users.length * EVENT_LIMIT;\n    const unusedCapacity = maxPossibleEvents - totalEventsAssigned;\n    if (unusedCapacity > 0 && events.length > 0) {\n        console.log(`Note: ${unusedCapacity} ticket slots remain unused. Consider increasing redundancy for important events.`);\n    }\n    return {\n        assignments,\n        errors\n    };\n}\n// Helper function to get priority label\nfunction getPriorityLabel(priority) {\n    switch(priority){\n        case 3:\n            return 'Critical';\n        case 2:\n            return 'Important';\n        case 1:\n            return 'Normal';\n        default:\n            return 'Unknown';\n    }\n}\n// Helper function to get priority emoji\nfunction getPriorityEmoji(priority) {\n    switch(priority){\n        case 3:\n            return '🔴';\n        case 2:\n            return '🟡';\n        case 1:\n            return '⚪';\n        default:\n            return '⚫';\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./utils/ticketAlgorithm.ts\n");

/***/ }),

/***/ "(api-node)/./utils/ticketAssignmentService.ts":
/*!******************************************!*\
  !*** ./utils/ticketAssignmentService.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getLatestTicketAssignments: () => (/* binding */ getLatestTicketAssignments),\n/* harmony export */   getUserTicketAssignment: () => (/* binding */ getUserTicketAssignment),\n/* harmony export */   recalculateAndSaveTicketAssignments: () => (/* binding */ recalculateAndSaveTicketAssignments)\n/* harmony export */ });\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/prisma */ \"(api-node)/./lib/prisma.ts\");\n/* harmony import */ var _ticketAlgorithm__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ticketAlgorithm */ \"(api-node)/./utils/ticketAlgorithm.ts\");\n\n\nasync function recalculateAndSaveTicketAssignments() {\n    try {\n        // Get all users with their events and priorities\n        const users = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.user.findMany({\n            include: {\n                userEvents: {\n                    include: {\n                        event: true\n                    }\n                }\n            }\n        });\n        // Transform data for the algorithm\n        const userEventData = users.flatMap((user)=>user.userEvents.map((userEvent)=>({\n                    userId: user.id,\n                    userName: `${user.firstName} ${user.lastName}`,\n                    eventId: userEvent.event.id,\n                    eventTitle: userEvent.event.title,\n                    priority: userEvent.priority,\n                    cost: userEvent.event.cost || '0'\n                })));\n        // Prepare all users list (including those with no events)\n        const allUsers = users.map((user)=>({\n                userId: user.id,\n                userName: `${user.firstName} ${user.lastName}`\n            }));\n        // Calculate ticket assignments with all users\n        const { assignments, errors } = (0,_ticketAlgorithm__WEBPACK_IMPORTED_MODULE_1__.calculateTicketAssignments)(userEventData, allUsers);\n        // Create a new calculation run\n        const calculationRun = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.calculationRun.create({\n            data: {\n                totalUsers: users.length,\n                totalEvents: new Set(userEventData.map((ue)=>ue.eventId)).size,\n                errors: JSON.stringify(errors)\n            }\n        });\n        // Clear old assignments (keep only the latest calculation)\n        await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.ticketAssignment.deleteMany({\n            where: {\n                calculationId: {\n                    not: calculationRun.id\n                }\n            }\n        });\n        // Save new assignments to database\n        const assignmentPromises = assignments.flatMap((assignment)=>assignment.events.map((event)=>_lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.ticketAssignment.create({\n                    data: {\n                        userId: assignment.userId,\n                        eventId: event.eventId,\n                        calculationId: calculationRun.id,\n                        buyingFor: JSON.stringify(event.buyingFor),\n                        priority: event.priority,\n                        cost: event.cost\n                    }\n                })));\n        await Promise.all(assignmentPromises);\n        console.log(`Ticket assignments recalculated. Calculation ID: ${calculationRun.id}`);\n        console.log(`Total assignments created: ${assignmentPromises.length}`);\n        return {\n            calculationId: calculationRun.id,\n            totalUsers: users.length,\n            totalEvents: new Set(userEventData.map((ue)=>ue.eventId)).size,\n            errors\n        };\n    } catch (error) {\n        console.error('Error recalculating ticket assignments:', error);\n        throw error;\n    }\n}\nasync function getLatestTicketAssignments() {\n    try {\n        // Get the latest calculation run\n        const latestCalculation = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.calculationRun.findFirst({\n            orderBy: {\n                createdAt: 'desc'\n            },\n            include: {\n                assignments: {\n                    include: {\n                        user: true,\n                        event: true\n                    }\n                }\n            }\n        });\n        if (!latestCalculation) {\n            return null;\n        }\n        // Transform to the expected format\n        const userAssignments = new Map();\n        for (const assignment of latestCalculation.assignments){\n            if (!userAssignments.has(assignment.userId)) {\n                userAssignments.set(assignment.userId, {\n                    userId: assignment.userId,\n                    userName: `${assignment.user.firstName} ${assignment.user.lastName}`,\n                    events: [],\n                    totalTickets: 0\n                });\n            }\n            const userAssignment = userAssignments.get(assignment.userId);\n            userAssignment.events.push({\n                eventId: assignment.eventId,\n                eventTitle: assignment.event.title,\n                priority: assignment.priority,\n                buyingFor: JSON.parse(assignment.buyingFor),\n                cost: assignment.cost\n            });\n            userAssignment.totalTickets += 1;\n        }\n        return {\n            assignments: Array.from(userAssignments.values()),\n            calculationRun: {\n                id: latestCalculation.id,\n                createdAt: latestCalculation.createdAt,\n                totalUsers: latestCalculation.totalUsers,\n                totalEvents: latestCalculation.totalEvents,\n                errors: JSON.parse(latestCalculation.errors)\n            }\n        };\n    } catch (error) {\n        console.error('Error getting latest ticket assignments:', error);\n        throw error;\n    }\n}\nasync function getUserTicketAssignment(userId) {\n    try {\n        // Get the latest calculation run\n        const latestCalculation = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.calculationRun.findFirst({\n            orderBy: {\n                createdAt: 'desc'\n            }\n        });\n        if (!latestCalculation) {\n            return null;\n        }\n        // Get assignments for this user\n        const assignments = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.ticketAssignment.findMany({\n            where: {\n                userId,\n                calculationId: latestCalculation.id\n            },\n            include: {\n                event: true,\n                user: true\n            }\n        });\n        if (assignments.length === 0) {\n            // User exists but has no assignments\n            const user = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.user.findUnique({\n                where: {\n                    id: userId\n                }\n            });\n            if (!user) {\n                return null;\n            }\n            return {\n                assignment: {\n                    userId,\n                    userName: `${user.firstName} ${user.lastName}`,\n                    events: [],\n                    totalTickets: 0\n                },\n                calculationRun: {\n                    id: latestCalculation.id,\n                    createdAt: latestCalculation.createdAt,\n                    totalUsers: latestCalculation.totalUsers,\n                    totalEvents: latestCalculation.totalEvents,\n                    errors: JSON.parse(latestCalculation.errors)\n                }\n            };\n        }\n        // Transform to expected format\n        const userAssignment = {\n            userId,\n            userName: `${assignments[0].user.firstName} ${assignments[0].user.lastName}`,\n            events: assignments.map((assignment)=>({\n                    eventId: assignment.eventId,\n                    eventTitle: assignment.event.title,\n                    priority: assignment.priority,\n                    buyingFor: JSON.parse(assignment.buyingFor),\n                    cost: assignment.cost\n                })),\n            totalTickets: assignments.length\n        };\n        return {\n            assignment: userAssignment,\n            calculationRun: {\n                id: latestCalculation.id,\n                createdAt: latestCalculation.createdAt,\n                totalUsers: latestCalculation.totalUsers,\n                totalEvents: latestCalculation.totalEvents,\n                errors: JSON.parse(latestCalculation.errors)\n            }\n        };\n    } catch (error) {\n        console.error('Error getting user ticket assignment:', error);\n        throw error;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL3V0aWxzL3RpY2tldEFzc2lnbm1lbnRTZXJ2aWNlLnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQXNDO0FBQ3lCO0FBV3hELGVBQWVFO0lBTXBCLElBQUk7UUFDRixpREFBaUQ7UUFDakQsTUFBTUMsUUFBUSxNQUFNSCwrQ0FBTUEsQ0FBQ0ksSUFBSSxDQUFDQyxRQUFRLENBQUM7WUFDdkNDLFNBQVM7Z0JBQ1BDLFlBQVk7b0JBQ1ZELFNBQVM7d0JBQ1BFLE9BQU87b0JBQ1Q7Z0JBQ0Y7WUFDRjtRQUNGO1FBRUEsbUNBQW1DO1FBQ25DLE1BQU1DLGdCQUFpQ04sTUFBTU8sT0FBTyxDQUFDTixDQUFBQSxPQUNuREEsS0FBS0csVUFBVSxDQUFDSSxHQUFHLENBQUNDLENBQUFBLFlBQWM7b0JBQ2hDQyxRQUFRVCxLQUFLVSxFQUFFO29CQUNmQyxVQUFVLEdBQUdYLEtBQUtZLFNBQVMsQ0FBQyxDQUFDLEVBQUVaLEtBQUthLFFBQVEsRUFBRTtvQkFDOUNDLFNBQVNOLFVBQVVKLEtBQUssQ0FBQ00sRUFBRTtvQkFDM0JLLFlBQVlQLFVBQVVKLEtBQUssQ0FBQ1ksS0FBSztvQkFDakNDLFVBQVVULFVBQVVTLFFBQVE7b0JBQzVCQyxNQUFNVixVQUFVSixLQUFLLENBQUNjLElBQUksSUFBSTtnQkFDaEM7UUFHRiwwREFBMEQ7UUFDMUQsTUFBTUMsV0FBV3BCLE1BQU1RLEdBQUcsQ0FBQ1AsQ0FBQUEsT0FBUztnQkFDbENTLFFBQVFULEtBQUtVLEVBQUU7Z0JBQ2ZDLFVBQVUsR0FBR1gsS0FBS1ksU0FBUyxDQUFDLENBQUMsRUFBRVosS0FBS2EsUUFBUSxFQUFFO1lBQ2hEO1FBRUEsOENBQThDO1FBQzlDLE1BQU0sRUFBRU8sV0FBVyxFQUFFQyxNQUFNLEVBQUUsR0FBR3hCLDRFQUEwQkEsQ0FBQ1EsZUFBZWM7UUFFMUUsK0JBQStCO1FBQy9CLE1BQU1HLGlCQUFpQixNQUFNMUIsK0NBQU1BLENBQUMwQixjQUFjLENBQUNDLE1BQU0sQ0FBQztZQUN4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QnJCLFdBQVc7Z0JBQzFDTixRQUFRVSxLQUFLNkIsS0FBSyxDQUFDWixrQkFBa0IzQixNQUFNO1lBQzdDO1FBQ0Y7SUFFRixFQUFFLE9BQU95QixPQUFPO1FBQ2RGLFFBQVFFLEtBQUssQ0FBQyx5Q0FBeUNBO1FBQ3ZELE1BQU1BO0lBQ1I7QUFDRiIsInNvdXJjZXMiOlsiL1VzZXJzL21hdHRoZXd2b2dlbC92c0NvZGUgcHJvamVjdHMvZ2VuY29uVHJhY2tlci91dGlscy90aWNrZXRBc3NpZ25tZW50U2VydmljZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwcmlzbWEgfSBmcm9tICdAL2xpYi9wcmlzbWEnO1xuaW1wb3J0IHsgY2FsY3VsYXRlVGlja2V0QXNzaWdubWVudHMgfSBmcm9tICcuL3RpY2tldEFsZ29yaXRobSc7XG5cbmludGVyZmFjZSBVc2VyRXZlbnREYXRhIHtcbiAgdXNlcklkOiBzdHJpbmc7XG4gIHVzZXJOYW1lOiBzdHJpbmc7XG4gIGV2ZW50SWQ6IHN0cmluZztcbiAgZXZlbnRUaXRsZTogc3RyaW5nO1xuICBwcmlvcml0eTogbnVtYmVyO1xuICBjb3N0OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZWNhbGN1bGF0ZUFuZFNhdmVUaWNrZXRBc3NpZ25tZW50cygpOiBQcm9taXNlPHtcbiAgY2FsY3VsYXRpb25JZDogc3RyaW5nO1xuICB0b3RhbFVzZXJzOiBudW1iZXI7XG4gIHRvdGFsRXZlbnRzOiBudW1iZXI7XG4gIGVycm9yczogc3RyaW5nW107XG59PiB7XG4gIHRyeSB7XG4gICAgLy8gR2V0IGFsbCB1c2VycyB3aXRoIHRoZWlyIGV2ZW50cyBhbmQgcHJpb3JpdGllc1xuICAgIGNvbnN0IHVzZXJzID0gYXdhaXQgcHJpc21hLnVzZXIuZmluZE1hbnkoe1xuICAgICAgaW5jbHVkZToge1xuICAgICAgICB1c2VyRXZlbnRzOiB7XG4gICAgICAgICAgaW5jbHVkZToge1xuICAgICAgICAgICAgZXZlbnQ6IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIFRyYW5zZm9ybSBkYXRhIGZvciB0aGUgYWxnb3JpdGhtXG4gICAgY29uc3QgdXNlckV2ZW50RGF0YTogVXNlckV2ZW50RGF0YVtdID0gdXNlcnMuZmxhdE1hcCh1c2VyID0+XG4gICAgICB1c2VyLnVzZXJFdmVudHMubWFwKHVzZXJFdmVudCA9PiAoe1xuICAgICAgICB1c2VySWQ6IHVzZXIuaWQsXG4gICAgICAgIHVzZXJOYW1lOiBgJHt1c2VyLmZpcnN0TmFtZX0gJHt1c2VyLmxhc3ROYW1lfWAsXG4gICAgICAgIGV2ZW50SWQ6IHVzZXJFdmVudC5ldmVudC5pZCxcbiAgICAgICAgZXZlbnRUaXRsZTogdXNlckV2ZW50LmV2ZW50LnRpdGxlLFxuICAgICAgICBwcmlvcml0eTogdXNlckV2ZW50LnByaW9yaXR5LFxuICAgICAgICBjb3N0OiB1c2VyRXZlbnQuZXZlbnQuY29zdCB8fCAnMCdcbiAgICAgIH0pKVxuICAgICk7XG5cbiAgICAvLyBQcmVwYXJlIGFsbCB1c2VycyBsaXN0IChpbmNsdWRpbmcgdGhvc2Ugd2l0aCBubyBldmVudHMpXG4gICAgY29uc3QgYWxsVXNlcnMgPSB1c2Vycy5tYXAodXNlciA9PiAoe1xuICAgICAgdXNlcklkOiB1c2VyLmlkLFxuICAgICAgdXNlck5hbWU6IGAke3VzZXIuZmlyc3ROYW1lfSAke3VzZXIubGFzdE5hbWV9YFxuICAgIH0pKTtcblxuICAgIC8vIENhbGN1bGF0ZSB0aWNrZXQgYXNzaWdubWVudHMgd2l0aCBhbGwgdXNlcnNcbiAgICBjb25zdCB7IGFzc2lnbm1lbnRzLCBlcnJvcnMgfSA9IGNhbGN1bGF0ZVRpY2tldEFzc2lnbm1lbnRzKHVzZXJFdmVudERhdGEsIGFsbFVzZXJzKTtcblxuICAgIC8vIENyZWF0ZSBhIG5ldyBjYWxjdWxhdGlvbiBydW5cbiAgICBjb25zdCBjYWxjdWxhdGlvblJ1biA9IGF3YWl0IHByaXNtYS5jYWxjdWxhdGlvblJ1bi5jcmVhdGUoe1xuICAgICAgZGF0YToge1xuICAgICAgICB0b3RhbFVzZXJzOiB1c2Vycy5sZW5ndGgsXG4gICAgICAgIHRvdGFsRXZlbnRzOiBuZXcgU2V0KHVzZXJFdmVudERhdGEubWFwKHVlID0+IHVlLmV2ZW50SWQpKS5zaXplLFxuICAgICAgICBlcnJvcnM6IEpTT04uc3RyaW5naWZ5KGVycm9ycylcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIENsZWFyIG9sZCBhc3NpZ25tZW50cyAoa2VlcCBvbmx5IHRoZSBsYXRlc3QgY2FsY3VsYXRpb24pXG4gICAgYXdhaXQgcHJpc21hLnRpY2tldEFzc2lnbm1lbnQuZGVsZXRlTWFueSh7XG4gICAgICB3aGVyZToge1xuICAgICAgICBjYWxjdWxhdGlvbklkOiB7XG4gICAgICAgICAgbm90OiBjYWxjdWxhdGlvblJ1bi5pZFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBTYXZlIG5ldyBhc3NpZ25tZW50cyB0byBkYXRhYmFzZVxuICAgIGNvbnN0IGFzc2lnbm1lbnRQcm9taXNlcyA9IGFzc2lnbm1lbnRzLmZsYXRNYXAoYXNzaWdubWVudCA9PlxuICAgICAgYXNzaWdubWVudC5ldmVudHMubWFwKGV2ZW50ID0+XG4gICAgICAgIHByaXNtYS50aWNrZXRBc3NpZ25tZW50LmNyZWF0ZSh7XG4gICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgdXNlcklkOiBhc3NpZ25tZW50LnVzZXJJZCxcbiAgICAgICAgICAgIGV2ZW50SWQ6IGV2ZW50LmV2ZW50SWQsXG4gICAgICAgICAgICBjYWxjdWxhdGlvbklkOiBjYWxjdWxhdGlvblJ1bi5pZCxcbiAgICAgICAgICAgIGJ1eWluZ0ZvcjogSlNPTi5zdHJpbmdpZnkoZXZlbnQuYnV5aW5nRm9yKSxcbiAgICAgICAgICAgIHByaW9yaXR5OiBldmVudC5wcmlvcml0eSxcbiAgICAgICAgICAgIGNvc3Q6IGV2ZW50LmNvc3RcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICApXG4gICAgKTtcblxuICAgIGF3YWl0IFByb21pc2UuYWxsKGFzc2lnbm1lbnRQcm9taXNlcyk7XG5cbiAgICBjb25zb2xlLmxvZyhgVGlja2V0IGFzc2lnbm1lbnRzIHJlY2FsY3VsYXRlZC4gQ2FsY3VsYXRpb24gSUQ6ICR7Y2FsY3VsYXRpb25SdW4uaWR9YCk7XG4gICAgY29uc29sZS5sb2coYFRvdGFsIGFzc2lnbm1lbnRzIGNyZWF0ZWQ6ICR7YXNzaWdubWVudFByb21pc2VzLmxlbmd0aH1gKTtcblxuICAgIHJldHVybiB7XG4gICAgICBjYWxjdWxhdGlvbklkOiBjYWxjdWxhdGlvblJ1bi5pZCxcbiAgICAgIHRvdGFsVXNlcnM6IHVzZXJzLmxlbmd0aCxcbiAgICAgIHRvdGFsRXZlbnRzOiBuZXcgU2V0KHVzZXJFdmVudERhdGEubWFwKHVlID0+IHVlLmV2ZW50SWQpKS5zaXplLFxuICAgICAgZXJyb3JzXG4gICAgfTtcblxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHJlY2FsY3VsYXRpbmcgdGlja2V0IGFzc2lnbm1lbnRzOicsIGVycm9yKTtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0TGF0ZXN0VGlja2V0QXNzaWdubWVudHMoKSB7XG4gIHRyeSB7XG4gICAgLy8gR2V0IHRoZSBsYXRlc3QgY2FsY3VsYXRpb24gcnVuXG4gICAgY29uc3QgbGF0ZXN0Q2FsY3VsYXRpb24gPSBhd2FpdCBwcmlzbWEuY2FsY3VsYXRpb25SdW4uZmluZEZpcnN0KHtcbiAgICAgIG9yZGVyQnk6IHsgY3JlYXRlZEF0OiAnZGVzYycgfSxcbiAgICAgIGluY2x1ZGU6IHtcbiAgICAgICAgYXNzaWdubWVudHM6IHtcbiAgICAgICAgICBpbmNsdWRlOiB7XG4gICAgICAgICAgICB1c2VyOiB0cnVlLFxuICAgICAgICAgICAgZXZlbnQ6IHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmICghbGF0ZXN0Q2FsY3VsYXRpb24pIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8vIFRyYW5zZm9ybSB0byB0aGUgZXhwZWN0ZWQgZm9ybWF0XG4gICAgY29uc3QgdXNlckFzc2lnbm1lbnRzID0gbmV3IE1hcDxzdHJpbmcsIGFueT4oKTtcblxuICAgIGZvciAoY29uc3QgYXNzaWdubWVudCBvZiBsYXRlc3RDYWxjdWxhdGlvbi5hc3NpZ25tZW50cykge1xuICAgICAgaWYgKCF1c2VyQXNzaWdubWVudHMuaGFzKGFzc2lnbm1lbnQudXNlcklkKSkge1xuICAgICAgICB1c2VyQXNzaWdubWVudHMuc2V0KGFzc2lnbm1lbnQudXNlcklkLCB7XG4gICAgICAgICAgdXNlcklkOiBhc3NpZ25tZW50LnVzZXJJZCxcbiAgICAgICAgICB1c2VyTmFtZTogYCR7YXNzaWdubWVudC51c2VyLmZpcnN0TmFtZX0gJHthc3NpZ25tZW50LnVzZXIubGFzdE5hbWV9YCxcbiAgICAgICAgICBldmVudHM6IFtdLFxuICAgICAgICAgIHRvdGFsVGlja2V0czogMFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgdXNlckFzc2lnbm1lbnQgPSB1c2VyQXNzaWdubWVudHMuZ2V0KGFzc2lnbm1lbnQudXNlcklkKTtcbiAgICAgIHVzZXJBc3NpZ25tZW50LmV2ZW50cy5wdXNoKHtcbiAgICAgICAgZXZlbnRJZDogYXNzaWdubWVudC5ldmVudElkLFxuICAgICAgICBldmVudFRpdGxlOiBhc3NpZ25tZW50LmV2ZW50LnRpdGxlLFxuICAgICAgICBwcmlvcml0eTogYXNzaWdubWVudC5wcmlvcml0eSxcbiAgICAgICAgYnV5aW5nRm9yOiBKU09OLnBhcnNlKGFzc2lnbm1lbnQuYnV5aW5nRm9yKSxcbiAgICAgICAgY29zdDogYXNzaWdubWVudC5jb3N0XG4gICAgICB9KTtcbiAgICAgIHVzZXJBc3NpZ25tZW50LnRvdGFsVGlja2V0cyArPSAxO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBhc3NpZ25tZW50czogQXJyYXkuZnJvbSh1c2VyQXNzaWdubWVudHMudmFsdWVzKCkpLFxuICAgICAgY2FsY3VsYXRpb25SdW46IHtcbiAgICAgICAgaWQ6IGxhdGVzdENhbGN1bGF0aW9uLmlkLFxuICAgICAgICBjcmVhdGVkQXQ6IGxhdGVzdENhbGN1bGF0aW9uLmNyZWF0ZWRBdCxcbiAgICAgICAgdG90YWxVc2VyczogbGF0ZXN0Q2FsY3VsYXRpb24udG90YWxVc2VycyxcbiAgICAgICAgdG90YWxFdmVudHM6IGxhdGVzdENhbGN1bGF0aW9uLnRvdGFsRXZlbnRzLFxuICAgICAgICBlcnJvcnM6IEpTT04ucGFyc2UobGF0ZXN0Q2FsY3VsYXRpb24uZXJyb3JzKVxuICAgICAgfVxuICAgIH07XG5cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBnZXR0aW5nIGxhdGVzdCB0aWNrZXQgYXNzaWdubWVudHM6JywgZXJyb3IpO1xuICAgIHRocm93IGVycm9yO1xuICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRVc2VyVGlja2V0QXNzaWdubWVudCh1c2VySWQ6IHN0cmluZykge1xuICB0cnkge1xuICAgIC8vIEdldCB0aGUgbGF0ZXN0IGNhbGN1bGF0aW9uIHJ1blxuICAgIGNvbnN0IGxhdGVzdENhbGN1bGF0aW9uID0gYXdhaXQgcHJpc21hLmNhbGN1bGF0aW9uUnVuLmZpbmRGaXJzdCh7XG4gICAgICBvcmRlckJ5OiB7IGNyZWF0ZWRBdDogJ2Rlc2MnIH1cbiAgICB9KTtcblxuICAgIGlmICghbGF0ZXN0Q2FsY3VsYXRpb24pIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIC8vIEdldCBhc3NpZ25tZW50cyBmb3IgdGhpcyB1c2VyXG4gICAgY29uc3QgYXNzaWdubWVudHMgPSBhd2FpdCBwcmlzbWEudGlja2V0QXNzaWdubWVudC5maW5kTWFueSh7XG4gICAgICB3aGVyZToge1xuICAgICAgICB1c2VySWQsXG4gICAgICAgIGNhbGN1bGF0aW9uSWQ6IGxhdGVzdENhbGN1bGF0aW9uLmlkXG4gICAgICB9LFxuICAgICAgaW5jbHVkZToge1xuICAgICAgICBldmVudDogdHJ1ZSxcbiAgICAgICAgdXNlcjogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKGFzc2lnbm1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgLy8gVXNlciBleGlzdHMgYnV0IGhhcyBubyBhc3NpZ25tZW50c1xuICAgICAgY29uc3QgdXNlciA9IGF3YWl0IHByaXNtYS51c2VyLmZpbmRVbmlxdWUoe1xuICAgICAgICB3aGVyZTogeyBpZDogdXNlcklkIH1cbiAgICAgIH0pO1xuXG4gICAgICBpZiAoIXVzZXIpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGFzc2lnbm1lbnQ6IHtcbiAgICAgICAgICB1c2VySWQsXG4gICAgICAgICAgdXNlck5hbWU6IGAke3VzZXIuZmlyc3ROYW1lfSAke3VzZXIubGFzdE5hbWV9YCxcbiAgICAgICAgICBldmVudHM6IFtdLFxuICAgICAgICAgIHRvdGFsVGlja2V0czogMFxuICAgICAgICB9LFxuICAgICAgICBjYWxjdWxhdGlvblJ1bjoge1xuICAgICAgICAgIGlkOiBsYXRlc3RDYWxjdWxhdGlvbi5pZCxcbiAgICAgICAgICBjcmVhdGVkQXQ6IGxhdGVzdENhbGN1bGF0aW9uLmNyZWF0ZWRBdCxcbiAgICAgICAgICB0b3RhbFVzZXJzOiBsYXRlc3RDYWxjdWxhdGlvbi50b3RhbFVzZXJzLFxuICAgICAgICAgIHRvdGFsRXZlbnRzOiBsYXRlc3RDYWxjdWxhdGlvbi50b3RhbEV2ZW50cyxcbiAgICAgICAgICBlcnJvcnM6IEpTT04ucGFyc2UobGF0ZXN0Q2FsY3VsYXRpb24uZXJyb3JzKVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIFRyYW5zZm9ybSB0byBleHBlY3RlZCBmb3JtYXRcbiAgICBjb25zdCB1c2VyQXNzaWdubWVudCA9IHtcbiAgICAgIHVzZXJJZCxcbiAgICAgIHVzZXJOYW1lOiBgJHthc3NpZ25tZW50c1swXS51c2VyLmZpcnN0TmFtZX0gJHthc3NpZ25tZW50c1swXS51c2VyLmxhc3ROYW1lfWAsXG4gICAgICBldmVudHM6IGFzc2lnbm1lbnRzLm1hcChhc3NpZ25tZW50ID0+ICh7XG4gICAgICAgIGV2ZW50SWQ6IGFzc2lnbm1lbnQuZXZlbnRJZCxcbiAgICAgICAgZXZlbnRUaXRsZTogYXNzaWdubWVudC5ldmVudC50aXRsZSxcbiAgICAgICAgcHJpb3JpdHk6IGFzc2lnbm1lbnQucHJpb3JpdHksXG4gICAgICAgIGJ1eWluZ0ZvcjogSlNPTi5wYXJzZShhc3NpZ25tZW50LmJ1eWluZ0ZvciksXG4gICAgICAgIGNvc3Q6IGFzc2lnbm1lbnQuY29zdFxuICAgICAgfSkpLFxuICAgICAgdG90YWxUaWNrZXRzOiBhc3NpZ25tZW50cy5sZW5ndGhcbiAgICB9O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGFzc2lnbm1lbnQ6IHVzZXJBc3NpZ25tZW50LFxuICAgICAgY2FsY3VsYXRpb25SdW46IHtcbiAgICAgICAgaWQ6IGxhdGVzdENhbGN1bGF0aW9uLmlkLFxuICAgICAgICBjcmVhdGVkQXQ6IGxhdGVzdENhbGN1bGF0aW9uLmNyZWF0ZWRBdCxcbiAgICAgICAgdG90YWxVc2VyczogbGF0ZXN0Q2FsY3VsYXRpb24udG90YWxVc2VycyxcbiAgICAgICAgdG90YWxFdmVudHM6IGxhdGVzdENhbGN1bGF0aW9uLnRvdGFsRXZlbnRzLFxuICAgICAgICBlcnJvcnM6IEpTT04ucGFyc2UobGF0ZXN0Q2FsY3VsYXRpb24uZXJyb3JzKVxuICAgICAgfVxuICAgIH07XG5cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKCdFcnJvciBnZXR0aW5nIHVzZXIgdGlja2V0IGFzc2lnbm1lbnQ6JywgZXJyb3IpO1xuICAgIHRocm93IGVycm9yO1xuICB9XG59XG4iXSwibmFtZXMiOlsicHJpc21hIiwiY2FsY3VsYXRlVGlja2V0QXNzaWdubWVudHMiLCJyZWNhbGN1bGF0ZUFuZFNhdmVUaWNrZXRBc3NpZ25tZW50cyIsInVzZXJzIiwidXNlciIsImZpbmRNYW55IiwiaW5jbHVkZSIsInVzZXJFdmVudHMiLCJldmVudCIsInVzZXJFdmVudERhdGEiLCJmbGF0TWFwIiwibWFwIiwidXNlckV2ZW50IiwidXNlcklkIiwiaWQiLCJ1c2VyTmFtZSIsImZpcnN0TmFtZSIsImxhc3ROYW1lIiwiZXZlbnRJZCIsImV2ZW50VGl0bGUiLCJ0aXRsZSIsInByaW9yaXR5IiwiY29zdCIsImFsbFVzZXJzIiwiYXNzaWdubWVudHMiLCJlcnJvcnMiLCJjYWxjdWxhdGlvblJ1biIsImNyZWF0ZSIsImRhdGEiLCJ0b3RhbFVzZXJzIiwibGVuZ3RoIiwidG90YWxFdmVudHMiLCJTZXQiLCJ1ZSIsInNpemUiLCJKU09OIiwic3RyaW5naWZ5IiwidGlja2V0QXNzaWdubWVudCIsImRlbGV0ZU1hbnkiLCJ3aGVyZSIsImNhbGN1bGF0aW9uSWQiLCJub3QiLCJhc3NpZ25tZW50UHJvbWlzZXMiLCJhc3NpZ25tZW50IiwiZXZlbnRzIiwiYnV5aW5nRm9yIiwiUHJvbWlzZSIsImFsbCIsImNvbnNvbGUiLCJsb2ciLCJlcnJvciIsImdldExhdGVzdFRpY2tldEFzc2lnbm1lbnRzIiwibGF0ZXN0Q2FsY3VsYXRpb24iLCJmaW5kRmlyc3QiLCJvcmRlckJ5IiwiY3JlYXRlZEF0IiwidXNlckFzc2lnbm1lbnRzIiwiTWFwIiwiaGFzIiwic2V0IiwidG90YWxUaWNrZXRzIiwidXNlckFzc2lnbm1lbnQiLCJnZXQiLCJwdXNoIiwicGFyc2UiLCJBcnJheSIsImZyb20iLCJ2YWx1ZXMiLCJnZXRVc2VyVGlja2V0QXNzaWdubWVudCIsImZpbmRVbmlxdWUiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api-node)/./utils/ticketAssignmentService.ts\n");

/***/ }),

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("@prisma/client");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fuser-events&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fuser-events.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();